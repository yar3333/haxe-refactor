ID = \b[_a-zA-Z][_a-zA-Z0-9]*\b
LONGID = ID(?:[.]ID)*
INT = [0-9]+(?:e[-+][0-9]+)?
FLOAT = [0-9]+(?:[.][0-9]+)?(?:e[-+][0-9]+)?
NUMBER = (?:INT|FLOAT)
VALUE = (?:LONGID|NUMBER)
SPACE = (?:[ ]|\t)+
OPTSPACE = (?:SPACE)?+

KEYWORDS = \b(?:new|return|extends|class|interface|enum|if|else|import|package|for|default|switch|case|final|private|public|protected|finally|catch|throw|function|package|import|use|namespace|implements|extends|static|const)\b

BASETYPE = (?:LONGID(?:[<]\s*LONGID(?:\s*,\s*LONGID)*\s*[>])?|LONGID[<]\s*[?](?:\s*,\s*[?])*\s*[>])
TYPE = (?:BASETYPE(?:\[\])*)

FORMAL_ARG = \s*TYPE\s+ID\s*
FORMAL_ARGS = (?:FORMAL_ARG(?:,FORMAL_ARG)*)?
FUNC_CALL = ID(?:<\s*ID(?:\s*,\s*ID)*\s*>)?\s*

ACCESS = (?:(?:static|public|private|protected)\s+)+

TYPENAME = (?:\b[A-Z][_a-z0-9A-Z]+|T)

STD_PHP_TYPES = string|int|float|null|true|false|object|array|bool|void

// trim end spaces ============================================
/[ \t]+\n/\n/

// new line before brackets ===================================
/\n(OPTSPACE)([^\n]+)\s*{[ \t]*\n/\n$1$2\n$1{\n/

// remove spaces before ")"
/[ ]+[)]/)

// ============================================================
// ============================================================

!^(package\s+ID(?:[.]ID)*)[.]!$1\\!mr
!^package\b!namespace!m

!^(import\s+ID(?:[.]ID)*)[.]!$1\\!mr
!^import(\s+)!use$1\\!m

/(ACCESS)<T>\s*/$1/

/(ACCESS)?final\s+(ACCESS)?var/$1$2var//static

!\n(?:OPTSPACE)@Override(?:OPTSPACE)\n!\n

![<]\s*[?](?:\s+extends\s+ID)*(?:\s*,\s*[?](?:\s+extends\s+ID)*)*\s*[>]!!

// detect constructor
/^([ \t]*(?:ACCESS)?)(?:ID)\s*[(](FORMAL_ARGS)[)]/$1function __construct($2)/m

/^([ \t]*(?:ACCESS)?)(?:\s*final\s*)?(TYPE)\s+(ID)\s*[(](FORMAL_ARGS)[)]/$1function $3($4):$2/m/function


/\bboolean\b/bool/

/[)]:(TYPE)/) : $1

/\bpublic\s+(class|interface)\b/$1

/(ID)[.](ID)/$1->$2/r
/[)][.]/)->/

/\bString\b/string/

!\b(TYPENAME)->!$1::!

!\bList<\s*(ID)\s*>!$1[]!

!^(OPTSPACE)(TYPE)(?:SPACE)(ID)\s*=!$1/** @var $2 $$$3 */\n$1$3 =!m!return

/\b(static\s+final)\b/const/

!(\bfor\s*[(]\s*)int\s*(ID\s*=\s*[0-9])!$1$2!

// ============================================================
// DOLLARS ADD AND REMOVE UNNECESSARY
// ============================================================

/\b(ID)\b/$$$1//KEYWORDS|TYPENAME|STD_PHP_TYPES
!([$]ID(?:->ID)*->)[$](ID)!$1$2!r
![$](ID\s*[(])!$1!
!^(namespace\s*)[$]!$1!m
!\\[$]!\\!


// ============================================================
// ADD PHPDOC
// ============================================================

FUNCTION_DECLARE_PREFIX_WITH_NAME = (?:ACCESS)?function\s+ID
PHP_FUNC_DECL_ARG = (?:\s*TYPE\s+[$]ID\s*)

!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){0})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){1})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){2})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){3})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){4})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){5})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){6})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){7})(TYPE)(\s+)([$]ID)!$1/**\n$1 * param $3 $5 \n$1 */\n$1$2$3$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG(?:,\s*PHP_FUNC_DECL_ARG)*)?[)]\s*:\s*)(TYPE)!$1/**\n$1 * return $3\n$1 */\n$1$2$3!m

!^(SPACE)(ACCESS)(TYPE)\s+([$]ID)!$1/**\n$1 * @var $3\n$1 */\n$1$2$4!m

// ============================================================
// AVOID [] IN TYPES
// ============================================================
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){0})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){1})(BASETYPE\[\])(\s+)([$]ID)!$1 */\n$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){2})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){3})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){4})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){5})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){6})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG,\s*){7})(BASETYPE\[\])(\s+)([$]ID)!$1$2array$4$5!m
!^(SPACE)(FUNCTION_DECLARE_PREFIX_WITH_NAME[(](?:PHP_FUNC_DECL_ARG(?:,\s*PHP_FUNC_DECL_ARG)*)?[)]\s*:\s*)BASETYPE\[\]!$1$2array!m

// ============================================================
// strict equation
// ============================================================
/==([^=])/===$1/
/!=([^=])/!==$1/

// ============================================================
// trim end spaces
// ============================================================
/[ \t]+\n/\n/
//\n((?:[ ]|\t)+)([^\n]+)\n\n/\n$1$2\n$1\n/m

// ============================================================
// formatting: add spaces
// ============================================================
/\n\n((?:[ ]|\t)+)/\n$1\n$1/
