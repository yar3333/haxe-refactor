ID = \b[_a-zA-Z][_a-zA-Z0-9]*\b
LONGID = ID(?:[.]ID)*
INT = [0-9]+(?:e[-+][0-9]+)?
FLOAT = [0-9]+(?:[.][0-9]+)?(?:e[-+][0-9]+)?
NUMBER = (?:INT|FLOAT)
VALUE = (?:LONGID|NUMBER)
SPACE = [ \t]+
OPTSPACE = [ \t]*

KEYWORDS = \b(?:new|return|var|class|enum|struct|namespace|if|else|using|foreach|for)\b

FORMAL_ARG_NAME = [?]?ID
FORMAL_ARG = \s*ID\s*:\s*TYPE\s*
FORMAL_ARGS = (?:FORMAL_ARG(?:,FORMAL_ARG)*)?
FUNC_CALL = ID(?:<\s*ID(?:\s*,\s*ID)*\s*>)?\s*

ACCESS = (?:static\s+)?(?:public|private|ptotected)(?:\s+static)?
TYPE = LONGID(?:[<]\s*LONGID(?:\s*,\s*LONGID)*\s*[>])?

STD_TYPE = \b(?:Int|Float|String|Dynamic|Bool)\b


// ==================== regular expressions ========================

// new line before { on class/interface definition
/\n(OPTSPACE)((:?extern[ \t]+)?(?:class|interface)[^\n{]+)\{/\n$1$2\n$1{/

// trim end spaces 
/([^ \t\n])[ \t]+$/$1/m

// remove spaces after "("
/[(][ ]+([^{])/($1

// remove spaces before ")"
/([_a-zA-Z0-9])[ ]+[)]/$1)

// remove empty lines before }
/(?:\n(?:OPTSPACE))+\n(OPTSPACE)}/\n$1}/

// ":T = new T" => " = new T"
/\s*[:][ ]*(TYPE)[ ]*[=][ ]*new[ ]*\1/ = new $1

// ":T = T." => " = T."
/\s*[:][ ]*(TYPE)[ ]*[=][ ]*\1[.]/ = $1.

// ":Int=123" => " = 123"
/\s*[:]\s*Int\s*[=]\s*(INT)/ = $1/
/\s*[:]\s*Bool\s*[=]\s*(true|false)/ = $1/
/\s*[:]\s*String\s*[=]\s*(["'])/ = $1/

// "var v:T=" => "var v : T ="
/\bvar\s+(ID)OPTSPACE[:]OPTSPACE(TYPE)OPTSPACE[=]/var $1 : $2 =/

// "var v:T" => "var v : T"
/\bvar\s+(ID)OPTSPACE[:]OPTSPACE(TYPE)/var $1 : $2/

// "a==b" => "a == b"
/[ ]*([=][=]|[!][=])[ ]*/ $1 /

// "(v:T=null" => "(?v:T"
/[(]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]OPTSPACE(TYPE)OPTSPACE[=]OPTSPACE\bnull\b/(?$1:$2
/[,]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]OPTSPACE(TYPE)OPTSPACE[=]OPTSPACE\bnull\b/, ?$1:$2

// "(v : T = a" => "(v=a"
/[(]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]OPTSPACE(?:STD_TYPE)OPTSPACE[=]OPTSPACE(VALUE)/($1=$2
/^([^\n])[,]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]OPTSPACE(?:STD_TYPE)OPTSPACE[=]OPTSPACE(VALUE)/$1, $2=$3//case

// (v : T => (v:T
/[(]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]OPTSPACE(TYPE)/($1:$2
/([^\n])[,]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[:]SPACE(TYPE)/$1, $2:$3/r/case

// "(v = a" => "(v=a"
/[(]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[=]OPTSPACE(VALUE)/($1=$2//new
/[,]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[=]OPTSPACE(VALUE)/, $1=$2

// '(s = "' => '(s="'
/[(]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[=]OPTSPACE(["'])/($1=$2
/[,]OPTSPACE(FORMAL_ARG_NAME)OPTSPACE[=]OPTSPACE(["'])/, $1=$2

// "(?v=" => "(v="
/[(]OPTSPACE[?](ID)OPTSPACE[=]/($1=
/[,]OPTSPACE[?](ID)OPTSPACE[=]/, $1=

// "{a" => "{ a"
/[{]([_a-zA-Z0-9('"-])/{ $1

// "a}" => "a }"
/([_a-zA-Z0-9)'";])[}]/$1 }

// "):T" => ") : T"
/[)]OPTSPACE[:]OPTSPACE(TYPE)/) : $1


// "if(" => "if ("
/\b(if|for|switch)\s*[(]/$1 (/

// "function (" => "function("
/\bfunction[ ]+[(]/function(/

// " ," => ","
/[ ]+[,]/,/

// "):{" => ") : {"
/[)][ ]*[:][ ]*[{]/) : {/

// "> )" => ">)"
/[>]SPACE\)/>)/

// ",a" => ", a"
/,([_a-zA-Z0-9])/, $1/
