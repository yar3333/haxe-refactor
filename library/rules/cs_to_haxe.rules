ID = \b[_a-zA-Z][_a-zA-Z0-9]*\b
LONGID = ID(?:[.]ID)*
INT = [0-9]+(?:e[-+][0-9]+)?
FLOAT = [0-9]+(?:[.][0-9]+)?(?:e[-+][0-9]+)?
NUMBER = (?:INT|FLOAT)
VALUE = (?:LONGID|NUMBER)
SPACE = (?:[ ]|\t)+
OPTSPACE = (?:SPACE)?+

KEYWORDS = \b(?:new|return|var|class|interface|enum|struct|namespace|if|else|using|foreach|for)\b

FORMAL_ARG = \s*ID\s*:\s*TYPE\s*
FORMAL_ARGS = (?:FORMAL_ARG(?:,FORMAL_ARG)*)?
FUNC_CALL = ID(?:<\s*ID(?:\s*,\s*ID)*\s*>)?\s*

ACCESS = (?:(?:static|public|private|override)\s+)+
BASETYPE = LONGID(?:[<]\s*LONGID(?:\s*,\s*LONGID)*\s*[>])?
TYPE = BASETYPE[?]?

// trim end spaces ============================================
/[ \t]+\n/\n/

// new line before brackets ===================================
/\n(OPTSPACE)([^\n]+)\s*{[ \t]*\n/\n$1$2\n$1{\n/

// remove spaces before ")"
/[ ]+[)]/)

// ============================================================
// ============================================================

/\bvirtual\s+//
/\bprotected\b/private/

// change "T[]" => "Array<T>"
/(TYPE)\s*\[\s*\]/Array<$1>

// change: "T v" => "var v:T"
/(TYPE)\s+(ID)(\s*[-=;+*\/%&{,)])/var $2:$1$3/s/KEYWORDS|[(]


// fix: "(var v:T" => "(v:T" and ",var v:T" => ",v:T"
/([(,]\s*)var (ID)[:](TYPE)/$1$2:$3//

/(ACCESS)(TYPE)\s+(ID)[(](FORMAL_ARGS)[)]/$1function $3($4):$2/
/^([ \t]*(?:ACCESS)?)(TYPE)\s+(ID)[(](FORMAL_ARGS)[)]/$1function $3($4):$2/m

/\busing\b/import
/\bnamespace\b/package

/\breadonly var\b/inline var

// dtStart:DateTime?
/(ID):(BASETYPE)[?]/?$1:$2

// foreach (i:T in a)
/\bforeach\s*[(](LONGID):TYPE\s+in\s+/for ($1 in /

// change std types
/:int\b/:Int
/:string\b/:String
/:bool\b/:Bool
/:void\b/:Void
/:short\b/:Int
/:float\b/:Float

/\bDateTime\b/Date
/\bDate.Now\b/Date.now()
/\bRegex\b/EReg
/\bToString\b/toString

// change: "var v:T" => "var a : T"
/\bvar\s+(ID)\s*:\s*(TYPE)/var $1 : $2/

// simplify 's : String = "' => 's = "'
/(ID)\s*[:]\s*String\s*[=]\s*"/$1 = "/

// "):T" => ") : T"
/[)]:(TYPE)/) : $1

/\bprivate\s+//

/\bpublic\s+class\b/class

// ============================================================
// ============================================================


// trim end spaces ==============================
/[ \t]+\n/\n/
//\n((?:[ ]|\t)+)([^\n]+)\n\n/\n$1$2\n$1\n/m

// add space prefixes ===========================
/\n\n((?:[ ]|\t)+)/\n$1\n$1/
