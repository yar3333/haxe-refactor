<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace sys;

use \php\Boot;

/**
 * This class allows you to get information about the files and directories.
 * See `sys.io.File` for the complementary file API.
 */
class FileSystem {
	/**
	 * Creates a directory specified by `path`.
	 * This method is recursive: The parent directories don't have to exist.
	 * If the directory cannot be created, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return void
	 */
	static public function createDirectory ($path) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:93: characters 3-36
		clearstatcache(true, $path);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:94: lines 94-95
		if (!is_dir($path)) {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:95: characters 4-33
			mkdir($path, 493, true);
		}
	}

	/**
	 * Tells if the file or directory specified by `path` is a directory.
	 * If `path` is not a valid file system entry or if its destination is not
	 * accessible, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return bool
	 */
	static public function isDirectory ($path) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:88: characters 3-36
		clearstatcache(true, $path);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:89: characters 3-29
		return is_dir($path);
	}

	/**
	 * Returns the names of all files and directories in the directory specified
	 * by `path`.
	 * If `path` does not denote a valid directory, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return \Array_hx
	 */
	static public function readDirectory ($path) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:107: characters 3-17
		$list = new \Array_hx();
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:108: characters 3-34
		$dir = opendir($path);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:109: characters 3-12
		$file = null;
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:110: lines 110-114
		while (true) {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:110: characters 10-38
			$file = readdir($dir);
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:110: lines 110-114
			if (!($file !== false)) {
				break;
			}
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:111: lines 111-113
			if (($file !== ".") && ($file !== "..")) {
				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:112: characters 5-20
				$list->arr[$list->length] = $file;
				++$list->length;
			}
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:115: characters 3-23
		closedir($dir);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/sys/FileSystem.hx:116: characters 9-20
		return $list;
	}
}

Boot::registerClass(FileSystem::class, 'sys.FileSystem');
