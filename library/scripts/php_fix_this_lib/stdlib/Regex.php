<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace stdlib;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxString;
use \php\_Boot\HxException;

/**
 * Full-form regex support like /search/replacement/flags. Substitutions $0-$9 in replacement is also supported. Example:
 *
 * var re = new Regex("/a(.)/$1z/g");
 * trace(re.apply("3ab4")); // output is: 3bz4
 *
 * Note 1: flag "g" is always exists, so you can omit it.
 *
 * Note 2: you can use nonestandard flag "r" to repeat search&replace while string changed.
 *
 * Note 3: you can use nonestandard flag "z" to smarty treating spaces as "[ \t\r\n]*" or "[ \t\r\n]+".
 *
 * Note 4: you can specify additional "except" part at the end:
 * /a.c/123/g/a([xy])c - will replace "abc" to "123", but not "axc" or "ayc".
 *
 * Note 5: change characters case is also supported (use $vN and $^N):
 * /(.)b/$^1b/ - will replace "ab" to "Ab".
 *
 * Note 6: indent/unindent captured text is also supported (use $>N and $<N):
 *
 * Note 7: you can use other delimiter than "/":
 * new Regex("#abc#def#g")
 */
class Regex {
	/**
	 * @var string
	 */
	public $excepts;
	/**
	 * @var string
	 */
	public $flags;
	/**
	 * @var bool
	 */
	public $repeat;
	/**
	 * @var string
	 */
	public $replacement;
	/**
	 * @var string
	 */
	public $search;

	/**
	 * @param string $re
	 * 
	 * @return void
	 */
	public function __construct ($re) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:38: characters 3-17
		$re = trim($re);
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:40: lines 40-132
		if (mb_strlen($re) > 0) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:42: characters 4-36
			$delimiter = mb_substr($re, 0, 1);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:44: characters 4-15
			$this->search = "";
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:45: characters 4-14
			$i = 1;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:45: lines 45-58
			while ($i < mb_strlen($re)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:47: characters 5-29
				$c = mb_substr($re, $i, 1);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:48: lines 48-56
				if (($c === $delimiter) && (($this->getBackSlashAtEndCount(mb_substr($re, 1, $i - 1)) % 2) === 0)) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:50: characters 6-9
					++$i;
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:51: characters 6-11
					break;
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:55: characters 6-17
					$this->search = ($this->search??'null') . ($c??'null');
				}
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:57: characters 5-8
				++$i;
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:60: characters 4-20
			$this->replacement = "";
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:61: lines 61-89
			while ($i < mb_strlen($re)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:63: characters 5-29
				$c1 = mb_substr($re, $i, 1);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:64: lines 64-87
				if ($c1 === $delimiter) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:66: characters 6-9
					++$i;
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:67: characters 6-11
					break;
				} else if ($c1 === "\\") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:72: characters 6-9
					++$i;
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:73: characters 6-25
					$c1 = mb_substr($re, $i, 1);
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:74: lines 74-82
					if ($c1 === "r") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:74: characters 20-39
						$this->replacement = ($this->replacement??'null') . "\x0D";
					} else if ($c1 === "n") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:76: characters 20-39
						$this->replacement = ($this->replacement??'null') . "\x0A";
					} else if ($c1 === "t") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:78: characters 20-39
						$this->replacement = ($this->replacement??'null') . "\x09";
					} else if ($c1 === "\\") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:80: characters 21-40
						$this->replacement = ($this->replacement??'null') . "\\";
					} else {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:82: characters 6-22
						$this->replacement = ($this->replacement??'null') . ($c1??'null');
					}
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:86: characters 6-22
					$this->replacement = ($this->replacement??'null') . ($c1??'null');
				}
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:88: characters 5-8
				++$i;
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:91: characters 4-28
			$tail = mb_substr($re, $i, null);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:92: characters 4-36
			$n = HxString::indexOf($tail, $delimiter);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:93: lines 93-102
			if ($n < 0) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:95: characters 5-17
				$this->flags = $tail;
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:99: characters 5-37
				$this->flags = trim(mb_substr($tail, 0, $n));
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:100: characters 5-50
				$this->excepts = $this->unescape(trim(mb_substr($tail, $n + 1, null)));
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:101: characters 5-38
				if ($this->excepts === "") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:101: characters 24-38
					$this->excepts = null;
				}
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:104: characters 4-45
			if ($this->replacement === "\$-") {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:104: characters 29-45
				$this->replacement = "";
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:106: characters 4-36
			$this->repeat = HxString::indexOf($this->flags, "r") >= 0;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:107: characters 4-51
			$this->flags = \StringTools::replace(\StringTools::replace($this->flags, "r", ""), "g", "");
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:109: lines 109-125
			if (HxString::indexOf($this->flags, "z") >= 0) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:111: characters 5-35
				$this->flags = \StringTools::replace($this->flags, "z", "");
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:112: lines 112-124
				$this->search = (new \EReg("[ \x09]+", "g"))->map($this->search, function ($re1) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:114: characters 6-34
					$left = $re1->matchedLeft();
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:115: characters 6-57
					if ($left !== "") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:115: characters 29-57
						$index = mb_strlen($left) - 1;
						$left = ($index < 0 ? "" : mb_substr($left, $index, 1));
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:117: characters 6-36
					$right = $re1->matchedRight();
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:118: characters 6-46
					if ($right !== "") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:118: characters 23-46
						$right = mb_substr($right, 0, 1);
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:120: characters 6-88
					if ($left === "") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:120: characters 22-88
						return "[ \\t\\r\\n]*" . ((((new \EReg("_a-zA-Z0-9", ""))->match($right) ? "\\b" : ""))??'null');
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:121: characters 6-88
					if ($right === "") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:121: characters 23-88
						return ((((new \EReg("_a-zA-Z0-9", ""))->match($left) ? "\\b" : ""))??'null') . "[ \\t\\r\\n]*";
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:122: characters 6-89
					if ((new \EReg("_a-zA-Z0-9", ""))->match($left) && (new \EReg("_a-zA-Z0-9", ""))->match($right)) {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:122: characters 67-89
						return "[ \\t\\r\\n]+";
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:123: characters 6-28
					return "[ \\t\\r\\n]*";
				});
			}
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:129: characters 4-15
			$this->search = "";
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:130: characters 4-20
			$this->replacement = "";
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:131: characters 4-15
			$this->flags = "";
		}
	}

	/**
	 * @param \EReg $re
	 * 
	 * @return string
	 */
	public function getActualReplacement ($re) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:189: characters 3-14
		$s = "";
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:190: characters 3-13
		$i = 0;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:191: lines 191-227
		while ($i < mb_strlen($this->replacement)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:193: characters 31-34
			$index = $i++;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:193: characters 4-36
			$c = ($index < 0 ? "" : mb_substr($this->replacement, $index, 1));
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:194: lines 194-226
			if ($c !== "\$") {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:196: characters 5-11
				$s = ($s??'null') . ($c??'null');
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:200: characters 28-31
				$index1 = $i++;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:200: characters 9-32
				$c = ($index1 < 0 ? "" : mb_substr($this->replacement, $index1, 1));
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:201: lines 201-225
				if ($c === "\$") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:203: characters 6-14
					$s = ($s??'null') . "\$";
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:207: characters 6-23
					$command = "";
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:208: lines 208-212
					if (HxString::indexOf("d0123456789", $c) < 0) {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:210: characters 7-18
						$command = $c;
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:211: characters 30-33
						$index2 = $i++;
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:211: characters 11-34
						$c = ($index2 < 0 ? "" : mb_substr($this->replacement, $index2, 1));
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:213: characters 6-61
					if ($c === "d") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:213: characters 26-50
						$c = mb_substr($this->replacement, $i, 2);
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:213: characters 52-58
						$i += 2;
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:214: characters 6-35
					$number = Std::parseInt($c);
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:215: characters 6-58
					$t = null;
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:215: characters 14-57
					try {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:215: characters 6-58
						$t = $re->matched($number);
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$_ = $__hx__real_e;
						$t = "";
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:216: characters 6-27
					if ($t === null) {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:216: characters 21-27
						$t = "";
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:217: lines 217-223
					if ($command === "<") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:222: characters 17-44
						$t = \StringTools::replace($t, "\x0A\x09", "\x0A");
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:222: characters 46-88
						if (\StringTools::startsWith($t, "\x09")) {
							#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:222: characters 70-88
							$t = HxString::substring($t, 1);
						}
					} else if ($command === ">") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:221: characters 17-51
						$t = "\x09" . (\StringTools::replace($t, "\x0A", "\x0A\x09")??'null');
					} else if ($command === "^") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:219: characters 17-36
						$t = mb_strtoupper($t);
					} else if ($command === "v") {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:220: characters 17-36
						$t = mb_strtolower($t);
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:224: characters 6-12
					$s = ($s??'null') . ($t??'null');
				}
			}
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:228: characters 3-11
		return $s;
	}

	/**
	 * @param string $s
	 * 
	 * @return int
	 */
	public function getBackSlashAtEndCount ($s) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:137: characters 3-13
		$r = 0;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 3-65
		while (true) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 10-60
			$tmp = null;
			if ($r < mb_strlen($s)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 26-52
				$index = mb_strlen($s) - 1 - $r;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 10-60
				$tmp = (($index < 0 ? "" : mb_substr($s, $index, 1))) === "\\";
			} else {
				$tmp = false;
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 3-65
			if (!$tmp) {
				break;
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:138: characters 62-65
			++$r;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:139: characters 3-11
		return $r;
	}

	/**
	 * @param string $text
	 * 
	 * @return \Array_hx
	 */
	public function matchAll ($text) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:162: characters 3-14
		$r = new \Array_hx();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:163: characters 3-42
		$re = new \EReg($this->search, "g" . ($this->flags??'null'));
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:164: characters 3-13
		$i = 0;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:164: lines 164-172
		while (($i < mb_strlen($text)) && $re->matchSub($text, $i)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:166: characters 4-28
			$p = $re->matchedPos();
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:167: lines 167-170
			if (($this->excepts === null) || !(new \EReg($this->excepts, "g"))->match($re->matched(0))) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:169: characters 18-23
				$p1 = $p->pos;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:169: characters 29-34
				$p2 = $p->len;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:169: characters 5-75
				$x = new HxAnon([
					"pos" => $p1,
					"len" => $p2,
					"replacement" => $this->getActualReplacement($re),
				]);
				$r->arr[$r->length] = $x;
				++$r->length;
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:171: characters 4-21
			$i = $p->pos + $p->len;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:173: characters 3-11
		return $r;
	}

	/**
	 * @param string $text
	 * @param \Closure $log
	 * 
	 * @return string
	 */
	public function replace ($text, $log = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:144: lines 144-157
		if (!$this->repeat) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:146: characters 4-34
			return $this->replaceInner($text, $log);
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:150: lines 150-155
			while (true) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:152: characters 5-20
				$old = $text;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:153: characters 5-35
				$text = $this->replaceInner($text, $log);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:154: characters 5-27
				if ($old === $text) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:154: characters 22-27
					break;
				}
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:156: characters 4-15
			return $text;
		}
	}

	/**
	 * @param string $text
	 * @param \Closure $log
	 * 
	 * @return string
	 */
	public function replaceInner ($text, $log = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:176: lines 176-185
		$_gthis = $this;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:178: lines 178-184
		return (new \EReg($this->search, "g" . ($this->flags??'null')))->map($text, function ($re)  use (&$_gthis, &$log) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:180: characters 4-92
			if (($_gthis->excepts !== null) && (new \EReg($_gthis->excepts, "g"))->match($re->matched(0))) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:180: characters 72-92
				return $re->matched(0);
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:181: characters 4-37
			$s = $_gthis->getActualReplacement($re);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:182: characters 4-91
			if ($log !== null) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:182: characters 25-90
				$tmp = (\StringTools::replace(\StringTools::replace($re->matched(0), "\x0D", ""), "\x0A", "\\n")??'null') . " => " . ($s??'null');
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:182: characters 21-91
				$log($tmp);
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:183: characters 4-12
			return $s;
		});
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public function unescape ($s) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:233: characters 3-14
		$r = "";
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:234: characters 3-13
		$i = 0;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:234: lines 234-254
		while ($i < mb_strlen($s)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:236: characters 4-27
			$c = mb_substr($s, $i, 1);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:237: lines 237-252
			if ($c === "\\") {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:239: characters 5-8
				++$i;
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:240: characters 5-23
				$c = mb_substr($s, $i, 1);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:241: lines 241-247
				if ($c === "r") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:241: characters 19-28
					$r = ($r??'null') . "\x0D";
				} else if ($c === "n") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:243: characters 19-28
					$r = ($r??'null') . "\x0A";
				} else if ($c === "t") {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:245: characters 19-28
					$r = ($r??'null') . "\x09";
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:247: characters 5-18
					$r = ($r??'null') . "\\" . ($c??'null');
				}
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:251: characters 5-11
				$r = ($r??'null') . ($c??'null');
			}
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:253: characters 4-7
			++$i;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Regex.hx:255: characters 3-11
		return $r;
	}
}

Boot::registerClass(Regex::class, 'stdlib.Regex');
