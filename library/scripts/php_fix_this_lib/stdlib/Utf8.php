<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace stdlib;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \haxe\Utf8 as HaxeUtf8;
use \php\_Boot\HxString;
use \haxe\ds\IntMap;
use \haxe\ds\StringMap;

class Utf8 extends HaxeUtf8 {
	/**
	 * @var IntMap
	 */
	static public $htmlEscapeMap;
	/**
	 * @var StringMap
	 */
	static public $htmlUnescapeMap;

	/**
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($s, $index) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:58: lines 58-60
		return HaxeUtf8::charCodeAt($s, $index);
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function compactSpaces ($s) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:40: characters 3-22
		$r = new Utf8();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:41: characters 3-25
		$prevSpace = false;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:42: lines 42-57
		HaxeUtf8::iter($s, function ($c)  use (&$r, &$prevSpace) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:44: lines 44-56
			if (($c === 32) || ($c === 13) || ($c === 10) || ($c === 9)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:46: lines 46-50
				if (!$prevSpace) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:48: characters 6-25
					$r->addChar(32);
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:49: characters 6-22
					$prevSpace = true;
				}
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:54: characters 5-17
				$r->addChar($c);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:55: characters 5-22
				$prevSpace = false;
			}
		});
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:58: characters 3-22
		return $r->toString();
	}

	/**
	 * @param string $a
	 * @param string $b
	 * 
	 * @return int
	 */
	static public function compare ($a, $b) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:79: lines 79-81
		return HaxeUtf8::compare($a, $b);
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function decode ($s) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:47: lines 47-49
		return HaxeUtf8::decode($s);
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function encode ($s) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:43: lines 43-45
		return HaxeUtf8::encode($s);
	}

	/**
	 * @return IntMap
	 */
	static public function get_htmlEscapeMap () {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:138: lines 138-151
		if (Utf8::$htmlEscapeMap === null) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:141: lines 141-150
			$_g = new IntMap();
			$_g->data[32] = "&nbsp;";
			$_g->data[38] = "&amp;";
			$_g->data[60] = "&lt;";
			$_g->data[62] = "&gt;";
			$_g->data[34] = "&quot;";
			$_g->data[39] = "&apos;";
			$_g->data[13] = "&#xD;";
			$_g->data[10] = "&#xA;";
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:140: lines 140-150
			Utf8::$htmlEscapeMap = $_g;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:152: characters 3-23
		return Utf8::$htmlEscapeMap;
	}

	/**
	 * @return StringMap
	 */
	static public function get_htmlUnescapeMap () {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:158: lines 158-263
		if (Utf8::$htmlUnescapeMap === null) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:161: lines 161-262
			$_g = new StringMap();
			$_g->data["nbsp"] = 32;
			$_g->data["amp"] = 38;
			$_g->data["lt"] = 60;
			$_g->data["gt"] = 62;
			$_g->data["quot"] = 34;
			$_g->data["apos"] = 39;
			$_g->data["euro"] = 8364;
			$_g->data["iexcl"] = 161;
			$_g->data["cent"] = 162;
			$_g->data["pound"] = 163;
			$_g->data["curren"] = 164;
			$_g->data["yen"] = 165;
			$_g->data["brvbar"] = 166;
			$_g->data["sect"] = 167;
			$_g->data["uml"] = 168;
			$_g->data["copy"] = 169;
			$_g->data["ordf"] = 170;
			$_g->data["not"] = 172;
			$_g->data["shy"] = 173;
			$_g->data["reg"] = 174;
			$_g->data["macr"] = 175;
			$_g->data["deg"] = 176;
			$_g->data["plusmn"] = 177;
			$_g->data["sup2"] = 178;
			$_g->data["sup3"] = 179;
			$_g->data["acute"] = 180;
			$_g->data["micro"] = 181;
			$_g->data["para"] = 182;
			$_g->data["middot"] = 183;
			$_g->data["cedil"] = 184;
			$_g->data["sup1"] = 185;
			$_g->data["ordm"] = 186;
			$_g->data["raquo"] = 187;
			$_g->data["frac14"] = 188;
			$_g->data["frac12"] = 189;
			$_g->data["frac34"] = 190;
			$_g->data["iquest"] = 191;
			$_g->data["Agrave"] = 192;
			$_g->data["Aacute"] = 193;
			$_g->data["Acirc"] = 194;
			$_g->data["Atilde"] = 195;
			$_g->data["Auml"] = 196;
			$_g->data["Aring"] = 197;
			$_g->data["AElig"] = 198;
			$_g->data["Ccedil"] = 199;
			$_g->data["Egrave"] = 200;
			$_g->data["Eacute"] = 201;
			$_g->data["Ecirc"] = 202;
			$_g->data["Euml"] = 203;
			$_g->data["Igrave"] = 204;
			$_g->data["Iacute"] = 205;
			$_g->data["Icirc"] = 206;
			$_g->data["Iuml"] = 207;
			$_g->data["ETH"] = 208;
			$_g->data["Ntilde"] = 209;
			$_g->data["Ograve"] = 210;
			$_g->data["Oacute"] = 211;
			$_g->data["Ocirc"] = 212;
			$_g->data["Otilde"] = 213;
			$_g->data["Ouml"] = 214;
			$_g->data["times"] = 215;
			$_g->data["Oslash"] = 216;
			$_g->data["Ugrave"] = 217;
			$_g->data["Uacute"] = 218;
			$_g->data["Ucirc"] = 219;
			$_g->data["Uuml"] = 220;
			$_g->data["Yacute"] = 221;
			$_g->data["THORN"] = 222;
			$_g->data["szlig"] = 223;
			$_g->data["agrave"] = 224;
			$_g->data["aacute"] = 225;
			$_g->data["acirc"] = 226;
			$_g->data["atilde"] = 227;
			$_g->data["auml"] = 228;
			$_g->data["aring"] = 229;
			$_g->data["aelig"] = 230;
			$_g->data["ccedil"] = 231;
			$_g->data["egrave"] = 232;
			$_g->data["eacute"] = 233;
			$_g->data["ecirc"] = 234;
			$_g->data["euml"] = 235;
			$_g->data["igrave"] = 236;
			$_g->data["iacute"] = 237;
			$_g->data["icirc"] = 238;
			$_g->data["iuml"] = 239;
			$_g->data["eth"] = 240;
			$_g->data["ntilde"] = 241;
			$_g->data["ograve"] = 242;
			$_g->data["oacute"] = 243;
			$_g->data["ocirc"] = 244;
			$_g->data["otilde"] = 245;
			$_g->data["ouml"] = 246;
			$_g->data["divide"] = 247;
			$_g->data["oslash"] = 248;
			$_g->data["ugrave"] = 249;
			$_g->data["uacute"] = 250;
			$_g->data["ucirc"] = 251;
			$_g->data["uuml"] = 252;
			$_g->data["yacute"] = 253;
			$_g->data["thorn"] = 254;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:160: lines 160-262
			Utf8::$htmlUnescapeMap = $_g;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:264: characters 3-25
		return Utf8::$htmlUnescapeMap;
	}

	/**
	 * @param string $utf8Str
	 * @param string $chars
	 * 
	 * @return string
	 */
	static public function htmlEscape ($utf8Str, $chars = "") {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:99: lines 99-118
		if ($chars === null) {
			$chars = "";
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:100: characters 3-24
		$chars = "&<>" . ($chars??'null');
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:102: characters 3-22
		$r = new Utf8();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:104: lines 104-115
		HaxeUtf8::iter($utf8Str, function ($c)  use (&$chars, &$r) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:106: characters 4-33
			$s = (Utf8::get_htmlEscapeMap()->data[$c] ?? null);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:107: lines 107-114
			if (($s !== null) && ($c >= 0) && ($c <= 255) && (HxString::indexOf($chars, mb_chr($c)) >= 0)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:109: characters 5-19
				$r->addString($s);
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:113: characters 5-17
				$r->addChar($c);
			}
		});
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:117: characters 3-22
		return $r->toString();
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function htmlUnescape ($s) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:63: characters 3-22
		$r = new Utf8();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:67: characters 3-30
		$escape = null;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:69: lines 69-93
		HaxeUtf8::iter($s, function ($c)  use (&$escape, &$r) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:71: lines 71-92
			if ($escape !== null) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:73: lines 73-82
				if ($c === 59) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:75: characters 6-41
					$chr = Utf8::htmlUnescapeChar($escape);
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:76: characters 6-37
					if ($chr !== null) {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:76: characters 23-37
						$r->addChar($chr);
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:77: characters 6-19
					$escape = null;
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:81: characters 6-38
					$escape = ($escape??'null') . (mb_chr($c)??'null');
				}
			} else if ($c === 38) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:87: characters 5-16
				$escape = "";
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:91: characters 5-17
				$r->addChar($c);
			}
		});
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:95: characters 3-22
		return $r->toString();
	}

	/**
	 * @param string $escape
	 * 
	 * @return int
	 */
	static public function htmlUnescapeChar ($escape) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:122: lines 122-129
		if (\StringTools::startsWith($escape, "#x")) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:122: characters 32-76
			return Std::parseInt("0x" . (mb_substr($escape, 2, null)??'null'));
		} else if (\StringTools::startsWith($escape, "#")) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:124: characters 31-68
			return Std::parseInt(mb_substr($escape, 1, null));
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:127: characters 4-40
			$r = (Utf8::get_htmlUnescapeMap()->data[$escape] ?? null);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:128: characters 4-27
			if ($r !== null) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:128: characters 19-27
				return $r;
			}
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:131: characters 3-8
		(Log::$trace)("Unknow escape sequence: " . ($escape??'null'), new HxAnon([
			"fileName" => "stdlib/Utf8.hx",
			"lineNumber" => 131,
			"className" => "stdlib.Utf8",
			"methodName" => "htmlUnescapeChar",
		]));
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:132: characters 3-14
		return null;
	}

	/**
	 * @param string $s
	 * @param \Closure $chars
	 * 
	 * @return void
	 */
	static public function iter ($s, $chars) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:51: lines 51-56
		HaxeUtf8::iter($s, $chars);
		return;
	}

	/**
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function length ($s) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:75: lines 75-77
		return HaxeUtf8::length($s);
	}

	/**
	 * @param string $s
	 * @param string $from
	 * @param string $to
	 * 
	 * @return string
	 */
	static public function replace ($s, $from, $to) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:10: characters 3-18
		$codes = new \Array_hx();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:10: characters 19-63
		HaxeUtf8::iter($s, function ($c)  use (&$codes) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:10: characters 49-62
			$codes->arr[$codes->length] = $c;
			++$codes->length;
		});
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:11: characters 3-22
		$r = new Utf8();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:12: characters 3-36
		$len = HaxeUtf8::length($from);
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:13: characters 3-35
		if ($codes->length < $len) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:13: characters 27-35
			return $s;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:14: lines 14-28
		$_g = 0;
		$_g1 = $codes->length - $len + 1;
		while ($_g < $_g1) {
			unset($i, $j, $found);
			$i = $_g++;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:16: characters 4-21
			$found = true;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:17: characters 4-14
			$j = 0;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:18: lines 18-25
			HaxeUtf8::iter($from, function ($cc)  use (&$i, &$found, &$j, &$codes) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:20: lines 20-24
				if ($found) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:22: characters 6-43
					if (($codes->arr[$i + $j] ?? null) !== $cc) {
						#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:22: characters 30-43
						$found = false;
					}
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:23: characters 6-9
					$j += 1;
				}
			});
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:26: lines 26-27
			if ($found) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:26: characters 15-30
				$r->addString($to);
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:27: characters 12-31
				$r->addChar(($codes->arr[$i] ?? null));
			}
		}

		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:29: lines 29-32
		$_g2 = $codes->length - $len + 1;
		$_g3 = $codes->length;
		while ($_g2 < $_g3) {
			$i1 = $_g2++;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:31: characters 4-23
			$r->addChar(($codes->arr[$i1] ?? null));
		}

		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:33: characters 3-22
		return $r->toString();
	}

	/**
	 * @param string $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function sub ($s, $pos, $len) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:83: lines 83-85
		return HaxeUtf8::sub($s, $pos, $len);
	}

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function validate ($s) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/Utf8.hx:71: lines 71-73
		return HaxeUtf8::validate($s);
	}

	/**
	 * @param int $size
	 * 
	 * @return void
	 */
	public function __construct ($size = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:6: lines 6-266
		parent::__construct($size);
	}

	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function addString ($s) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:36: characters 2-79
		$_gthis = $this;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:36: characters 38-79
		HaxeUtf8::iter($s, function ($c)  use (&$_gthis) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Utf8.hx:36: characters 68-78
			$_gthis->addChar($c);
		});
	}
}

Boot::registerClass(Utf8::class, 'stdlib.Utf8');
Boot::registerGetters('stdlib\\Utf8', [
	'htmlUnescapeMap' => true,
	'htmlEscapeMap' => true
]);
