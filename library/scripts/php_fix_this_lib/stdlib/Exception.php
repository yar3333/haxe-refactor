<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace stdlib;

use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxException;

class Exception {
	/**
	 * @var string
	 */
	public $message;
	/**
	 * @var \Array_hx
	 */
	public $stack;

	/**
	 * @param mixed $exception
	 * 
	 * @return void
	 */
	static public function rethrow ($exception) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:51: characters 3-8
		throw new HxException(Exception::wrap($exception));
	}

	/**
	 * @param mixed $e
	 * 
	 * @return string
	 */
	static public function string ($e) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:30: characters 3-25
		$r = \Std::string($e);
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:31: lines 31-39
		if (!($e instanceof Exception)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:36: characters 4-63
			$stack = CallStack::toString(CallStack::exceptionStack());
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:38: characters 4-95
			if ($stack !== "") {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:38: characters 21-95
				$r = ($r??'null') . "\x0AStack trace:\x0A\x09" . (\StringTools::replace(ltrim($stack), "\x0A", "\x0A\x09")??'null');
			}
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:40: characters 3-11
		return $r;
	}

	/**
	 * @param mixed $e
	 * 
	 * @return Exception
	 */
	static public function wrap ($e) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:57: lines 57-62
		if (!($e instanceof Exception)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:59: characters 4-41
			$r = new Exception(\Std::string($e));
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:60: characters 4-40
			$r->stack = CallStack::exceptionStack();
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:61: characters 4-12
			return $r;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:63: characters 3-11
		return $e;
	}

	/**
	 * @param string $message
	 * 
	 * @return void
	 */
	public function __construct ($message = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:13: characters 3-48
		$this->message = ($message === null ? "" : $message);
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:14: characters 3-32
		$this->stack = CallStack::callStack();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:15: characters 3-16
		$_this = $this->stack;
		if ($_this->length > 0) {
			$_this->length--;
		}
		array_shift($_this->arr);

	}

	/**
	 * @return string
	 */
	public function toString () {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Exception.hx:21: characters 3-109
		return ($this->message??'null') . "\x0AStack trace:\x0A\x09" . (\StringTools::replace(ltrim(CallStack::toString($this->stack)), "\x0A", "\x0A\x09")??'null');
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Exception::class, 'stdlib.Exception');
