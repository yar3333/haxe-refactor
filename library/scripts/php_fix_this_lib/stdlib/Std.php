<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace stdlib;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \haxe\ds\StringMap;

class Std {
	/**
	 * @param int $x
	 * 
	 * @return int
	 */
	static public function abs ($x) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:72: characters 56-71
		if ($x >= 0) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:72: characters 65-66
			return $x;
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:72: characters 69-71
			return -$x;
		}
	}

	/**
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	static public function bool ($v) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:28: lines 28-33
		if (($v !== false) && ($v !== null) && !Boot::equal($v, 0) && ($v !== "") && ($v !== "0")) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:33: characters 7-156
			if (!(!Boot::is($v, Boot::getClass('String')))) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:33: characters 30-155
				if ((mb_strtolower(Boot::typedCast(Boot::getClass('String'), $v)) !== "false") && (mb_strtolower(Boot::typedCast(Boot::getClass('String'), $v)) !== "off")) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:33: characters 116-155
					return mb_strtolower(Boot::typedCast(Boot::getClass('String'), $v)) !== "null";
				} else {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:33: characters 30-155
					return false;
				}
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:33: characters 7-156
				return true;
			}
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:28: lines 28-33
			return false;
		}
	}

	/**
	 * @param mixed $obj
	 * @param Class $_
	 * 
	 * @return mixed
	 */
	static public function downCast ($obj, $_) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:76: characters 72-82
		return $obj;
	}

	/**
	 * Make hash from object's fields.
	 * 
	 * @param mixed $obj
	 * 
	 * @return StringMap
	 */
	static public function hash ($obj) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:60: characters 3-37
		$r = new StringMap();
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:61: lines 61-64
		$_g = 0;
		$_g1 = \Reflect::fields($obj);
		while ($_g < $_g1->length) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:61: characters 8-11
			$key = ($_g1->arr[$_g] ?? null);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:61: lines 61-64
			++$_g;
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:63: characters 4-39
			$value = \Reflect::field($obj, $key);
			$r->data[$key] = $value;

		}

		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:65: characters 3-11
		return $r;
	}

	/**
	 * @param mixed $value
	 * @param Class $c
	 * 
	 * @return mixed
	 */
	static public function instance ($value, $c) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Std.hx:35: lines 35-37
		return (Boot::is($value, $c) ? $value : null);
	}

	/**
	 * @param float $x
	 * 
	 * @return int
	 */
	static public function int ($x) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Std.hx:43: lines 43-45
		return (int)($x);
	}

	/**
	 * @param mixed $v
	 * @param mixed $t
	 * 
	 * @return bool
	 */
	static public function is ($v, $t) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Std.hx:31: lines 31-33
		return Boot::is($v, $t);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	static public function max ($a, $b) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:70: characters 63-76
		if ($a > $b) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:70: characters 71-72
			return $a;
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:70: characters 75-76
			return $b;
		}
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	static public function min ($a, $b) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:68: characters 63-76
		if ($a < $b) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:68: characters 71-72
			return $a;
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:68: characters 75-76
			return $b;
		}
	}

	/**
	 * @param string $x
	 * @param float $defaultValue
	 * 
	 * @return float
	 */
	static public function parseFloat ($x, $defaultValue = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:17: characters 3-37
		if ($x === null) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:17: characters 18-37
			return $defaultValue;
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:18: lines 18-22
		if ((new \EReg("^\\s*[+-]?\\s*\\d{1,20}(?:[.]\\d+)?(?:e[+-]?\\d{1,20})?\\s*\$", ""))->match($x)) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:20: characters 4-34
			$r = \Std::parseFloat($x);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:21: characters 11-44
			if (!is_nan($r)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:21: characters 28-29
				return $r;
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:21: characters 32-44
				return $defaultValue;
			}
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:23: characters 3-22
		return $defaultValue;
	}

	/**
	 * @param string $x
	 * @param int $defaultValue
	 * 
	 * @return int
	 */
	static public function parseInt ($x, $defaultValue = null) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:10: lines 10-12
		if ($x !== null) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:11: characters 6-109
			if ((new \EReg("^\\s*[+-]?\\s*((?:0x[0-9a-fA-F]{1,7})|(?:\\d{1,9}))\\s*\$", ""))->match($x)) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:11: characters 74-93
				return \Std::parseInt($x);
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:11: characters 96-108
				return $defaultValue;
			}
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:12: characters 6-18
			return $defaultValue;
		}
	}

	/**
	 * @param string $x
	 * 
	 * @return mixed
	 */
	static public function parseValue ($x) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:38: characters 3-27
		$value = $x;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:39: characters 3-60
		$valueLC = ($value !== null ? HxDynamicStr::wrap($value)->toLowerCase() : null);
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:40: characters 3-29
		$parsedValue = null;
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:42: lines 42-50
		if ($valueLC === "true") {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:42: characters 26-38
			$value = true;
		} else if ($valueLC === "false") {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:44: characters 27-40
			$value = false;
		} else if ($valueLC === "null") {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:46: characters 26-38
			$value = null;
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:48: characters 7-42
			$parsedValue = Std::parseInt($value);
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:48: lines 48-50
			if ($parsedValue !== null) {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:48: characters 52-71
				$value = $parsedValue;
			} else {
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:50: characters 7-44
				$parsedValue = Std::parseFloat($value);
				#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:50: characters 3-73
				if ($parsedValue !== null) {
					#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:50: characters 54-73
					$value = $parsedValue;
				}
			}
		}
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:52: characters 3-15
		return $value;
	}

	/**
	 * @param int $x
	 * 
	 * @return int
	 */
	static public function random ($x) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Std.hx:85: lines 85-87
		if ($x <= 1) {
			return 0;
		} else {
			return mt_rand(0, $x - 1);
		}
	}

	/**
	 * @param float $n
	 * 
	 * @return int
	 */
	static public function sign ($n) {
		#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:74: characters 59-87
		if ($n > 0) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:74: characters 67-68
			return 1;
		} else if ($n < 0) {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:74: characters 80-82
			return -1;
		} else {
			#c:\MyProg\_haxelibs\stdlib\library\stdlib/Std.hx:74: characters 85-86
			return 0;
		}
	}

	/**
	 * @param mixed $s
	 * 
	 * @return string
	 */
	static public function string ($s) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Std.hx:39: lines 39-41
		return \Std::string($s);
	}
}

Boot::registerClass(Std::class, 'stdlib.Std');
