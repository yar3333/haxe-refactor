<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace hant;

use \php\Boot;
use \stdlib\Exception;
use \haxe\CallStack;
use \php\_Boot\HxString;
use \php\_Boot\HxException;

/**
 * Global log class.
 * Using:
 *		Log.instance = new Log(5); // init log at the start of your application; 5 - nesting level limit (messages with greater nesting level will be ignored)
 * 		...
 *		Log.start("MyProcessStartMessage");
 * 		...
 * 		Log.echo("myMessage");
 * 		...
 * 		if (good) Log.finishSuccess(); // finish Process
 * 		else      Log.finishFail();
 */
class Log {
	/**
	 * @var Log
	 */
	static public $instance;

	/**
	 * @var int
	 */
	public $depth;
	/**
	 * @var int
	 */
	public $depthLimit;
	/**
	 * @var bool
	 */
	public $inBlock;
	/**
	 * @var int
	 */
	public $ind;
	/**
	 * @var int
	 */
	public $levelLimit;
	/**
	 * @var \Array_hx
	 */
	public $shown;

	/**
	 * @param string $message
	 * @param int $level
	 * 
	 * @return void
	 */
	static public function echo ($message, $level = 1) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:39: characters 3-59
		if ($level === null) {
			$level = 1;
		}
		if (Log::$instance !== null) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:39: characters 25-59
			Log::$instance->echoInner($message, $level);
		}
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	static public function finishFail ($text = "FAIL") {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:34: characters 3-55
		if ($text === null) {
			$text = "FAIL";
		}
		if (Log::$instance !== null) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:34: characters 25-55
			Log::$instance->finishFailInner($text);
		}
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	static public function finishSuccess ($text = "OK") {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:29: characters 3-58
		if ($text === null) {
			$text = "OK";
		}
		if (Log::$instance !== null) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:29: characters 25-58
			Log::$instance->finishSuccessInner($text);
		}
	}

	/**
	 * @param string $message
	 * @param int $level
	 * @param \Closure $procFunc
	 * 
	 * @return void
	 */
	static public function process ($message, $level = 1, $procFunc) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:43: lines 43-55
		if ($level === null) {
			$level = 1;
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:44: characters 3-24
		Log::start($message, $level);
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:45: lines 45-53
		try {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:47: characters 4-14
			$procFunc();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:51: characters 4-16
			Log::finishFail();
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:52: characters 4-24
			Exception::rethrow($e);
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:54: characters 3-18
		Log::finishSuccess();
	}

	/**
	 * @param string $message
	 * @param int $level
	 * @param \Closure $procFunc
	 * 
	 * @return mixed
	 */
	static public function processResult ($message, $level = 1, $procFunc) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:58: lines 58-72
		if ($level === null) {
			$level = 1;
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:59: characters 3-24
		Log::start($message, $level);
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:60: characters 3-20
		$r = null;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:61: lines 61-69
		try {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:63: characters 4-18
			$r = $procFunc();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:67: characters 4-16
			Log::finishFail();
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:68: characters 4-24
			Exception::rethrow($e);
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:70: characters 3-18
		Log::finishSuccess();
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:71: characters 3-11
		return $r;
	}

	/**
	 * @param string $message
	 * @param int $level
	 * 
	 * @return void
	 */
	static public function start ($message, $level = 1) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:24: characters 9-66
		if ($level === null) {
			$level = 1;
		}
		if (Log::$instance !== null) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:24: characters 31-66
			Log::$instance->startInner($message, $level);
		}
	}

	/**
	 * @param int $depthLimit
	 * @param int $levelLimit
	 * 
	 * @return void
	 */
	public function __construct ($depthLimit = 2147483647, $levelLimit = 2147483647) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:84: lines 84-91
		if ($depthLimit === null) {
			$depthLimit = 2147483647;
		}
		if ($levelLimit === null) {
			$levelLimit = 2147483647;
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:85: characters 9-37
		$this->depthLimit = $depthLimit;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:86: characters 9-37
		$this->levelLimit = $levelLimit;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:87: characters 9-19
		$this->depth = -1;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:88: characters 3-10
		$this->ind = 0;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:89: characters 9-24
		$this->inBlock = false;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:90: characters 3-13
		$this->shown = new \Array_hx();
	}

	/**
	 * @param string $text
	 * @param int $level
	 * 
	 * @return void
	 */
	public function echoInner ($text, $level) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:149: lines 149-158
		if ($this->depth < $this->depthLimit) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:151: lines 151-157
			if ($level <= $this->levelLimit) {
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:153: characters 5-28
				$text = \Std::string($text);
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:154: characters 5-29
				if ($this->inBlock) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:154: characters 18-29
					$this->println("");
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:155: characters 5-66
				$this->println(($this->indent($this->ind)??'null') . (\StringTools::replace($text, "\x0A", "\x0A" . ($this->indent($this->ind)??'null'))??'null'));
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:156: characters 5-20
				$this->inBlock = false;
			}
		}
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	public function finishFailInner ($text) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:132: lines 132-143
		if ($this->depth < $this->depthLimit) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:134: characters 8-19
			$_this = $this->shown;
			if ($_this->length > 0) {
				$_this->length--;
			}
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:134: lines 134-142
			if (array_pop($_this->arr)) {
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:136: characters 5-28
				$text = \Std::string($text);
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:137: characters 5-37
				if (!$this->inBlock) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:137: characters 19-37
					$this->print($this->indent($this->ind));
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:138: characters 5-10
				$this->ind--;
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:139: lines 139-140
				if (HxString::indexOf($text, "\x0A") < 0) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:139: characters 33-58
					$this->println("[" . ($text??'null') . "]");
				} else {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:140: characters 15-148
					$this->println("\x0A" . ($this->indent($this->ind + 1)??'null') . "[\x0A" . ($this->indent($this->ind + 2)??'null') . (\StringTools::replace($text, "\x0A", "\x0A" . ($this->indent($this->ind + 2)??'null'))??'null') . "\x0A" . ($this->indent($this->ind + 1)??'null') . "]");
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:141: characters 5-20
				$this->inBlock = false;
			}
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:144: characters 9-16
		$this->depth--;
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	public function finishSuccessInner ($text) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:115: lines 115-126
		if ($this->depth < $this->depthLimit) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:117: characters 17-28
			$_this = $this->shown;
			if ($_this->length > 0) {
				$_this->length--;
			}
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:117: lines 117-125
			if (array_pop($_this->arr)) {
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:119: characters 5-28
				$text = \Std::string($text);
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:120: characters 5-37
				if (!$this->inBlock) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:120: characters 19-37
					$this->print($this->indent($this->ind));
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:121: characters 5-10
				$this->ind--;
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:122: lines 122-123
				if (HxString::indexOf($text, "\x0A") < 0) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:122: characters 33-58
					$this->println("[" . ($text??'null') . "]");
				} else {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:123: characters 15-148
					$this->println("\x0A" . ($this->indent($this->ind + 1)??'null') . "[\x0A" . ($this->indent($this->ind + 2)??'null') . (\StringTools::replace($text, "\x0A", "\x0A" . ($this->indent($this->ind + 2)??'null'))??'null') . "\x0A" . ($this->indent($this->ind + 1)??'null') . "]");
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:124: characters 5-20
				$this->inBlock = false;
			}
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:127: characters 9-16
		$this->depth--;
	}

	/**
	 * @param int $depth
	 * 
	 * @return string
	 */
	public function indent ($depth) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:163: characters 9-52
		return \StringTools::rpad("", " ", $depth * 2);
	}

	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function print ($s) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:168: characters 3-15
		echo(\Std::string($s));
	}

	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function println ($s) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:173: characters 3-17
		echo((\Std::string($s)??'null') . "\x0A");
	}

	/**
	 * @param string $message
	 * @param int $level
	 * 
	 * @return void
	 */
	public function startInner ($message, $level) {
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:95: characters 9-16
		$this->depth++;
		#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:96: lines 96-110
		if ($this->depth < $this->depthLimit) {
			#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:98: lines 98-109
			if ($level <= $this->levelLimit) {
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:100: characters 5-29
				if ($this->inBlock) {
					#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:100: characters 18-29
					$this->println("");
				}
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:101: characters 5-40
				$this->print(($this->indent($this->ind)??'null') . ($message??'null') . ": ");
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:102: characters 5-19
				$this->inBlock = true;
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:103: characters 5-21
				$_this = $this->shown;
				$_this->arr[$_this->length] = true;
				++$_this->length;

				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:104: characters 5-10
				$this->ind++;
			} else {
				#c:\MyProg\_haxelibs\hant\library\hant/Log.hx:108: characters 5-22
				$_this1 = $this->shown;
				$_this1->arr[$_this1->length] = false;
				++$_this1->length;
			}
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$instance = new Log();
	}
}

Boot::registerClass(Log::class, 'hant.Log');
Log::__hx__init();
