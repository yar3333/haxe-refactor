<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace hant;

use \php\Boot;
use \haxe\io\Path as IoPath;
use \php\_Boot\HxString;

/**
 * Improved version of haxe.io.Path.
 */
class Path extends IoPath {
	/**
	 * @var bool
	 */
	static public $isWindows;

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function addTrailingSlash ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:13: characters 71-113
		return IoPath::addTrailingSlash($path);
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function directory ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:10: characters 64-99
		return IoPath::directory($path);
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function extension ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:11: characters 64-99
		return IoPath::extension($path);
	}

	/**
	 * @param string $basePath
	 * @param string $absolutePath
	 * 
	 * @return string
	 */
	static public function getRelative ($basePath, $absolutePath) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:37: characters 9-110
		if (($basePath === "") || (IoPath::removeTrailingSlashes($basePath) === ".")) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:37: characters 71-110
			$basePath = (realpath(".") ?: null);
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:40: characters 3-54
		$basePath = \StringTools::replace($basePath, "\\", "/");
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:41: characters 9-68
		$absolutePath = \StringTools::replace($absolutePath, "\\", "/");
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:43: characters 9-20
		$r = "";
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:44: characters 9-29
		$commonPart = "";
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:45: characters 9-51
		$basePathFolders = HxString::split($basePath, "/");
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:46: characters 9-59
		$absolutePathFolders = HxString::split($absolutePath, "/");
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:47: characters 9-19
		$i = 0;
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:48: lines 48-59
		while (($i < $basePathFolders->length) && ($i < $absolutePathFolders->length)) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:50: lines 50-57
			if (mb_strtolower(($basePathFolders->arr[$i] ?? null)) === mb_strtolower(($absolutePathFolders->arr[$i] ?? null))) {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:52: characters 17-55
				$commonPart = ($commonPart??'null') . (($basePathFolders->arr[$i] ?? null)??'null') . "/";
			} else {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:56: characters 17-22
				break;
			}
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:58: characters 13-16
			++$i;
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:60: lines 60-66
		if (mb_strlen($commonPart) > 0) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:62: lines 62-65
			$_g = 0;
			$_g1 = HxString::split(mb_substr($basePath, mb_strlen($commonPart) - 1, null), "/");
			while ($_g < $_g1->length) {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:62: characters 18-21
				$dir = ($_g1->arr[$_g] ?? null);
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:62: lines 62-65
				++$_g;
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:64: characters 17-42
				if ($dir !== "") {
					#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:64: characters 32-42
					$r = ($r??'null') . "../";
				}
			}
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:67: characters 9-52
		$r = ($r??'null') . (mb_substr($absolutePath, mb_strlen($commonPart), null)??'null');
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:68: characters 9-17
		return $r;
	}

	/**
	 * @param \Array_hx $paths
	 * 
	 * @return string
	 */
	static public function join ($paths) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:28: characters 11-43
		$f = Boot::getStaticClosure(Path::class, 'removeTrailingSlashes');
		$result = [];
		$collection = $paths->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		$paths = \Array_hx::wrap($result);
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:29: characters 3-55
		if (($paths->length === 1) && (($paths->arr[0] ?? null) === ".")) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:29: characters 45-55
			return ".";
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:30: characters 11-63
		$f1 = function ($s) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:30: characters 43-62
			if ($s !== "") {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:30: characters 54-62
				return $s !== ".";
			} else {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:30: characters 43-62
				return false;
			}
		};
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:30: characters 11-63
		$result1 = [];
		$collection1 = $paths->arr;
		foreach ($collection1 as $key1 => $value1) {
			if ($f1($value1)) {
				$result1[] = $value1;
			}
		}

		$paths = \Array_hx::wrap($result1);
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:31: characters 3-25
		return $paths->join("/");
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function makeNative ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:75: characters 3-67
		if (Path::$isWindows === null) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:75: characters 26-67
			Path::$isWindows = \Sys::systemName() === "Windows";
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:76: characters 10-97
		if (Path::$isWindows) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:76: characters 22-58
			return \StringTools::replace($path, "/", "\\");
		} else {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:76: characters 61-97
			return \StringTools::replace($path, "\\", "/");
		}
	}

	/**
	 * Replace `\` to '/' and remove slashes at the end.
	 * 
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function normalize ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:21: characters 3-46
		$path = \StringTools::replace($path, "\\", "/");
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 3-91
		while (true) {
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 10-64
			$tmp = null;
			if (mb_strlen($path) > 1) {
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 29-57
				$index = mb_strlen($path) - 1;
				#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 10-64
				$tmp = (($index < 0 ? "" : mb_substr($path, $index, 1))) === "/";
			} else {
				$tmp = false;
			}
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 3-91
			if (!$tmp) {
				break;
			}
			#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:22: characters 66-91
			$path = mb_substr($path, 0, -1);
		}
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:23: characters 3-14
		return $path;
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function removeTrailingSlashes ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:14: characters 76-123
		return IoPath::removeTrailingSlashes($path);
	}

	/**
	 * @param string $path
	 * @param string $ext
	 * 
	 * @return string
	 */
	static public function withExtension ($path, $ext) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:12: characters 80-124
		return IoPath::withExtension($path, $ext);
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function withoutDirectory ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:9: characters 71-113
		return IoPath::withoutDirectory($path);
	}

	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function withoutExtension ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:8: characters 71-113
		return IoPath::withoutExtension($path);
	}

	/**
	 * @param string $path
	 * 
	 * @return void
	 */
	public function __construct ($path) {
		#c:\MyProg\_haxelibs\hant\library\hant/Path.hx:6: lines 6-79
		parent::__construct($path);
	}
}

Boot::registerClass(Path::class, 'hant.Path');
