<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \php\_Boot\HxString;

class PhpFixThis {
	/**
	 * @param string $text
	 * 
	 * @return string
	 */
	static public function fix ($text) {
		#src/PhpFixThis.hx:32: characters 3-35
		$lexems = new \Array_hx();
		#src/PhpFixThis.hx:34: characters 3-45
		$reID = new \EReg("^[\$]?[_a-zA-Z][_a-zA-Z0-9]*", "");
		#src/PhpFixThis.hx:36: lines 36-135
		while (mb_strlen($text) > 0) {
			#src/PhpFixThis.hx:38: lines 38-134
			if (\StringTools::startsWith($text, "/*")) {
				#src/PhpFixThis.hx:40: characters 5-34
				$end = HxString::indexOf($text, "*/");
				#src/PhpFixThis.hx:41: characters 5-71
				$x = new \Lexem(\LexemType::COMMENT(), mb_substr($text, 0, $end + 2));
				$lexems->arr[$lexems->length] = $x;
				++$lexems->length;

				#src/PhpFixThis.hx:42: characters 5-32
				$text = mb_substr($text, $end + 2, null);
			} else if (\StringTools::startsWith($text, "//")) {
				#src/PhpFixThis.hx:46: characters 5-34
				$end1 = HxString::indexOf($text, "\x0A");
				#src/PhpFixThis.hx:47: characters 5-71
				$x1 = new \Lexem(\LexemType::COMMENT(), mb_substr($text, 0, $end1 + 1));
				$lexems->arr[$lexems->length] = $x1;
				++$lexems->length;

				#src/PhpFixThis.hx:48: characters 5-32
				$text = mb_substr($text, $end1 + 1, null);
			} else if (\StringTools::startsWith($text, "'")) {
				#src/PhpFixThis.hx:52: characters 5-31
				$s = mb_substr($text, 0, 1);
				#src/PhpFixThis.hx:52: characters 32-53
				$text = mb_substr($text, 1, null);
				#src/PhpFixThis.hx:53: lines 53-77
				while (mb_strlen($text) > 0) {
					#src/PhpFixThis.hx:55: lines 55-76
					if (\StringTools::startsWith($text, "\\")) {
						#src/PhpFixThis.hx:57: characters 7-29
						$s = ($s??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:57: characters 31-52
						$text = mb_substr($text, 1, null);
						#src/PhpFixThis.hx:58: lines 58-65
						if (\StringTools::startsWith($text, "u")) {
							#src/PhpFixThis.hx:60: characters 8-30
							$s = ($s??'null') . (mb_substr($text, 0, 5)??'null');
							#src/PhpFixThis.hx:60: characters 32-53
							$text = mb_substr($text, 5, null);
						} else {
							#src/PhpFixThis.hx:64: characters 8-30
							$s = ($s??'null') . (mb_substr($text, 0, 1)??'null');
							#src/PhpFixThis.hx:64: characters 32-53
							$text = mb_substr($text, 1, null);
						}
					} else if (\StringTools::startsWith($text, "'")) {
						#src/PhpFixThis.hx:70: characters 7-29
						$s = ($s??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:70: characters 31-52
						$text = mb_substr($text, 1, null);
						#src/PhpFixThis.hx:71: characters 7-12
						break;
					} else {
						#src/PhpFixThis.hx:75: characters 7-29
						$s = ($s??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:75: characters 31-52
						$text = mb_substr($text, 1, null);
					}
				}
				#src/PhpFixThis.hx:78: characters 5-48
				$x2 = new \Lexem(\LexemType::STRING(), $s);
				$lexems->arr[$lexems->length] = $x2;
				++$lexems->length;

			} else if (\StringTools::startsWith($text, "\"")) {
				#src/PhpFixThis.hx:82: characters 5-31
				$s1 = mb_substr($text, 0, 1);
				#src/PhpFixThis.hx:82: characters 32-53
				$text = mb_substr($text, 1, null);
				#src/PhpFixThis.hx:83: lines 83-107
				while (mb_strlen($text) > 0) {
					#src/PhpFixThis.hx:85: lines 85-106
					if (\StringTools::startsWith($text, "\\")) {
						#src/PhpFixThis.hx:87: characters 7-29
						$s1 = ($s1??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:87: characters 31-52
						$text = mb_substr($text, 1, null);
						#src/PhpFixThis.hx:88: lines 88-95
						if (\StringTools::startsWith($text, "u")) {
							#src/PhpFixThis.hx:90: characters 8-30
							$s1 = ($s1??'null') . (mb_substr($text, 0, 5)??'null');
							#src/PhpFixThis.hx:90: characters 32-53
							$text = mb_substr($text, 5, null);
						} else {
							#src/PhpFixThis.hx:94: characters 8-30
							$s1 = ($s1??'null') . (mb_substr($text, 0, 1)??'null');
							#src/PhpFixThis.hx:94: characters 32-53
							$text = mb_substr($text, 1, null);
						}
					} else if (\StringTools::startsWith($text, "\"")) {
						#src/PhpFixThis.hx:100: characters 7-29
						$s1 = ($s1??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:100: characters 31-52
						$text = mb_substr($text, 1, null);
						#src/PhpFixThis.hx:101: characters 7-12
						break;
					} else {
						#src/PhpFixThis.hx:105: characters 7-29
						$s1 = ($s1??'null') . (mb_substr($text, 0, 1)??'null');
						#src/PhpFixThis.hx:105: characters 31-52
						$text = mb_substr($text, 1, null);
					}
				}
				#src/PhpFixThis.hx:108: characters 5-48
				$x3 = new \Lexem(\LexemType::STRING(), $s1);
				$lexems->arr[$lexems->length] = $x3;
				++$lexems->length;

			} else if (\StringTools::startsWith($text, "->")) {
				#src/PhpFixThis.hx:112: characters 5-63
				$x4 = new \Lexem(\LexemType::ARROW(), mb_substr($text, 0, 2));
				$lexems->arr[$lexems->length] = $x4;
				++$lexems->length;

				#src/PhpFixThis.hx:113: characters 5-26
				$text = mb_substr($text, 2, null);
			} else if (\StringTools::startsWith($text, "{")) {
				#src/PhpFixThis.hx:117: characters 5-76
				$x5 = new \Lexem(\LexemType::BEG_FIGURE_BRACKET(), mb_substr($text, 0, 1));
				$lexems->arr[$lexems->length] = $x5;
				++$lexems->length;

				#src/PhpFixThis.hx:118: characters 5-26
				$text = mb_substr($text, 1, null);
			} else if (\StringTools::startsWith($text, "}")) {
				#src/PhpFixThis.hx:122: characters 5-76
				$x6 = new \Lexem(\LexemType::END_FIGURE_BRACKET(), mb_substr($text, 0, 1));
				$lexems->arr[$lexems->length] = $x6;
				++$lexems->length;

				#src/PhpFixThis.hx:123: characters 5-26
				$text = mb_substr($text, 1, null);
			} else if ($reID->match($text)) {
				#src/PhpFixThis.hx:127: characters 5-58
				$x7 = new \Lexem(\LexemType::ID(), $reID->matched(0));
				$lexems->arr[$lexems->length] = $x7;
				++$lexems->length;

				#src/PhpFixThis.hx:128: characters 12-47
				$text = mb_substr($text, mb_strlen($reID->matched(0)), null);
			} else {
				#src/PhpFixThis.hx:132: characters 5-63
				$x8 = new \Lexem(\LexemType::OTHER(), mb_substr($text, 0, 1));
				$lexems->arr[$lexems->length] = $x8;
				++$lexems->length;

				#src/PhpFixThis.hx:133: characters 5-26
				$text = mb_substr($text, 1, null);
			}
		}
		#src/PhpFixThis.hx:137: characters 10-55
		$f = function ($lexem) {
			#src/PhpFixThis.hx:137: characters 37-54
			return $lexem->text;
		};
		#src/PhpFixThis.hx:137: characters 10-55
		$result = [];
		$collection = $lexems->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		#src/PhpFixThis.hx:137: characters 3-64
		return \Array_hx::wrap($result)->join("");
	}
}

Boot::registerClass(PhpFixThis::class, 'PhpFixThis');
