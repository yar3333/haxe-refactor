<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe\io;

use \haxe\io\_BytesData\Container;
use \php\Boot;

class BytesBuffer {
	/**
	 * @var mixed
	 */
	public $b;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/io/BytesBuffer.hx:33: characters 3-9
		$this->b = "";
	}

	/**
	 * Returns either a copy or a reference of the current bytes.
	 * Once called, the buffer can no longer be used.
	 * 
	 * @return Bytes
	 */
	public function getBytes () {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/io/BytesBuffer.hx:81: characters 41-47
		$bytes = strlen($this->b);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/io/BytesBuffer.hx:81: characters 3-52
		$bytes1 = new Bytes($bytes, new Container($this->b));
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/io/BytesBuffer.hx:82: characters 3-11
		$this->b = null;
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/haxe/io/BytesBuffer.hx:83: characters 3-15
		return $bytes1;
	}
}

Boot::registerClass(BytesBuffer::class, 'haxe.io.BytesBuffer');
