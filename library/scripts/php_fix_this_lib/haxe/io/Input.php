<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe\io;

use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxException;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * Read and return all available data.
	 * The `bufsize` optional argument specifies the size of chunks by
	 * which data is read. Its default value is target-specific.
	 * 
	 * @param int $bufsize
	 * 
	 * @return Bytes
	 */
	public function readAll ($bufsize = null) {
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:109: lines 109-111
		if ($bufsize === null) {
			#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:111: characters 4-11
			$bufsize = 8192;
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:116: characters 3-34
		$buf = Bytes::alloc($bufsize);
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:117: characters 3-41
		$total = new BytesBuffer();
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:118: lines 118-125
		try {
			#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:119: lines 119-124
			while (true) {
				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:120: characters 5-40
				$len = $this->readBytes($buf, 0, $bufsize);
				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:121: lines 121-122
				if ($len === 0) {
					#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:122: characters 6-11
					throw new HxException(Error::Blocked());
				}
				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:123: characters 5-30
				if (($len < 0) || ($len > $buf->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$left = $total->b;
					$this_s = substr($buf->b->s, 0, $len);
					$total->b = ($left . $this_s);
				}
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$e = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:126: characters 3-26
		return $total->getBytes();
	}

	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:53: characters 10-15
		throw new HxException("Not implemented");
	}

	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Returns the actual length of read data that can be smaller than `len`.
	 * See `readFullBytes` that tries to read the exact amount of specified bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:68: characters 4-9
			throw new HxException(Error::OutsideBounds());
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:69: lines 69-83
		try {
			#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:74: characters 6-28
				$val = $this->readByte();
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:80: characters 5-10
				++$pos;
				#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:81: characters 5-8
				--$k;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/haxe/io/Input.hx:84: characters 3-15
		return $len - $k;
	}
}

Boot::registerClass(Input::class, 'haxe.io.Input');
