<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class gives you access to many base functionalities of system platforms. Looks in `sys` sub packages for more system APIs.
 */
class Sys {
	/**
	 * Returns all the arguments that were passed by the command line.
	 * 
	 * @return \Array_hx
	 */
	static public function args () {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:40: lines 40-44
		if (array_key_exists("argv", $_SERVER)) {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:41: characters 4-89
			return \Array_hx::wrap(array_slice($_SERVER["argv"], 1));
		} else {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:43: characters 4-13
			return new \Array_hx();
		}
	}

	/**
	 * Run the given command. The command output will be printed on the same output as the current process.
	 * The current process will block until the command terminates and it will return the command result (0 if there was no error).
	 * Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.
	 * 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
	 * `cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.
	 * 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
	 * It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).
	 * Read the `sys.io.Process` api for a more complete way to start background processes.
	 * 
	 * @param string $cmd
	 * @param \Array_hx $args
	 * 
	 * @return int
	 */
	static public function command ($cmd, $args = null) {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:83: lines 83-93
		if ($args !== null) {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:84: characters 12-24
			if (Sys::systemName() === "Windows") {
				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:86: lines 86-89
				$_g = new \Array_hx();
				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:87: lines 87-88
				$_g1 = 0;
				$_g2 = (\Array_hx::wrap([\StringTools::replace($cmd, "/", "\\")]))->concat($args);
				while ($_g1 < $_g2->length) {
					#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:87: characters 12-13
					$a = ($_g2->arr[$_g1] ?? null);
					#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:87: lines 87-88
					++$_g1;
					#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:88: characters 7-39
					$x = \StringTools::quoteWinArg($a, true);
					$_g->arr[$_g->length] = $x;
					++$_g->length;

				}

				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:86: lines 86-89
				$cmd = $_g->join(" ");
			} else {
				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:91: characters 12-60
				$_this = (\Array_hx::wrap([$cmd]))->concat($args);
				$f = Boot::getStaticClosure(\StringTools::class, 'quoteUnixArg');
				$result = [];
				$collection = $_this->arr;
				foreach ($collection as $key => $value) {
					$result[] = $f($value);
				}

				#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:91: characters 6-70
				$cmd = \Array_hx::wrap($result)->join(" ");
			}
		}
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:94: characters 3-30
		$result1 = Boot::deref(0);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:95: characters 3-29
		system($cmd, $result1);
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:96: characters 3-16
		return $result1;
	}

	/**
	 * Returns the name of the system you are running on. For instance :
	 * "Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.
	 * 
	 * @return string
	 */
	static public function systemName () {
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:77: characters 3-33
		$s = php_uname("s");
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:78: characters 3-26
		$p = HxString::indexOf($s, " ");
		#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:79: characters 10-39
		if ($p >= 0) {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:79: characters 20-34
			return mb_substr($s, 0, $p);
		} else {
			#C:\MyProg\_tools\motion-twin\haxe\std/php/_std/Sys.hx:79: characters 37-38
			return $s;
		}
	}
}

Boot::registerClass(Sys::class, 'Sys');
